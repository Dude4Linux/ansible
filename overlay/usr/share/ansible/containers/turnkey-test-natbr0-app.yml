---
- name: Test a TurnKey natbr0 appliance
  hosts: lxc
  gather_facts: yes

  vars:
    host_key_checking: false
    ssh_user: '{{lookup("env", "USER")}}'
    ssh_key: '{{lookup("file", "~/.ssh/id_rsa.pub")}}'

    app: core
    container: "{{app}}-natbr0-container"
    domain: "{{app}}.local.lxc"
    exceptions: ['core', 'tkldev', 'mysql', 'postgresql']
    good_codes: [200, 201, 202, 300, 301, 302, 303, 304, 307, 308, 400, 401, 403]

  tasks:
    - name: Identify TurnKey appliance under test
      debug: msg="Testing TurnKey {{app}} natbr0 appliance"
      tags: always

    - name: Clear lxc lock
      tags: always
      # required by bug in ansible installaion
      file: path=/var/lock/subsys/lxc state=absent

    - name: Get list of containers
      tags: always
      command: "lxc-ls"
      register: containers
      ignore_errors: yes

    - name: Create TurnKey container
      tags: create
      # Create container
      lxc_container:
        name: "{{container}}"
        container_log: true
        config: /etc/lxc/natbridge.conf
        #backing_store: lvm
        #vg_name: turnkey
        state: started
        template: turnkey
        template_options: "{{app}}"
        #template_options: "{{app}} --version=13.0-wheezy"
        container_command: |
          sleep 10
          # make sure required packages are present
          apt-get -yq update
          apt-get -yq install python python-apt
          # install the ansible user's public key
          mkdir -p /root/.ssh
          echo '{{ssh_key}}' >> /root/.ssh/authorized_keys
      register: created
      when: "'{{container}}' not in containers.stdout"

    - name: Start TurnKey container
      tags: always
      lxc_container:
        name: "{{container}}"
        state: started
      ignore_errors: yes
      when: "'{{container}}' in containers.stdout"

    - name: Wait for host name resolution
      tags: always
      command: "host {{container}}"
      register: host_name
      ignore_errors: yes
      until: host_name.rc == 0
      delay: 10
      retries: 10
                    
    - name: Wait for container
      tags: always
      wait_for:
        host: "{{container}}"
        port: 22
        delay: 10
        timeout: 300
      register: container_up
      ignore_errors: yes

    - name: Add to inventory
      tags: create
      sudo: yes
      lineinfile:
        dest: /etc/ansible/hosts
        regexp: "{{container}}"
        line: "{{container}}   ansible_ssh_host={{ansible_hostname}} ansible_connection=lxc_remote"
        state: present
      ignore_errors: yes
      when: created|success
      delegate_to: ansible

    - name: Create web proxy
      tags: create
      command: "nginx-proxy -d {{domain}} -n {{container}}"
      ignore_errors: yes
      register: proxy
      changed_when: "proxy.rc == 1"
      failed_when: "proxy.rc == 2"

    - name: Test appliance webpage
      tags: test
      uri:
        url: "http://{{container}}"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: webpage
      ignore_errors: yes
      until: webpage|success
      delay: 10
      retries: 30
      when: container_up|success and app not in exceptions

    - name: Test proxy webpage
      tags: test
      uri:
        url: "http://{{domain}}"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: proxy_page
      ignore_errors: yes
      until: proxy_page|success
      delay: 10
      retries: 10
      when: webpage|success and app not in exceptions

    - name: Test appliance ssl webpage
      tags: test
      uri:
        url: "https://{{container}}"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: ssl_page
      ignore_errors: yes
      until: ssl_page|success
      delay: 10
      retries: 10
      when: container_up|success and app not in exceptions
  
    - name: Test proxy ssl webpage
      tags: test
      uri:
        url: "https://{{domain}}"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: proxy_ssl
      ignore_errors: yes
      until: proxy_ssl|success
      delay: 10
      retries: 10
      when: ssl_page|success and app not in exceptions

    - name: Test appliance shellinabox
      tags: test
      uri:
        url: "https://{{container}}:12320"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: shellinabox
      ignore_errors: yes
      until: shellinabox|success
      delay: 10
      retries: 10
  
    - name: Test proxy shellinabox
      tags: test
      uri:
        url: "https://{{domain}}:12320"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: proxy_box
      ignore_errors: yes
      until: proxy_box|success
      delay: 10
      retries: 10
  
    - name: Test appliance webmin
      tags: test
      uri:
        url: "https://{{container}}:12321"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: webmin
      ignore_errors: yes
      until: webmin|success
      delay: 10
      retries: 10
 
    - name: Test proxy webmin
      tags: test
      uri:
        url: "https://{{domain}}:12321"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: proxy_min
      ignore_errors: yes
      until: proxy_min|success
      delay: 10
      retries: 10
 
    - name: Check for adminer
      tags: test
      wait_for:
        host: "{{container}}"
        port: 12322
        timeout: 5
      register: adminer_present
      ignore_errors: yes

    - name: Test appliance adminer
      tags: test
      uri:
        url: "https://{{container}}:12322"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: adminer
      ignore_errors: yes
      until: adminer|success
      delay: 10
      retries: 10
      when: adminer_present|success

    - name: Test proxy adminer
      tags: test
      uri:
        url: "https://{{domain}}:12322"
        validate_certs: no
        status_code: "{{good_codes}}"
      register: proxy_adminer
      ignore_errors: yes
      until: proxy_adminer|success
      delay: 10
      retries: 10
      when: adminer_present|success

    - name: Shutdown TurnKey container
      tags: destroy
      lxc_container:
        name: "{{container}}"
        state: stopped
      ignore_errors: yes
      when: not (
            created|failed or
            webpage|failed or
            proxy_page|failed or
            ssl_page|failed or
            proxy_ssl|failed or
            shellinabox|failed or
            proxy_box|failed or
            webmin|failed or
            proxy_min|failed or
            adminer|failed or
            proxy_adminer|failed
            )

    - name: Remove from inventory
      tags: destroy
      sudo: yes
      lineinfile:
        dest: /etc/ansible/hosts
        regexp: "{{container}}"
        state: absent
      ignore_errors: yes
      delegate_to: ansible
      when: not (
            created|failed or
            webpage|failed or
            proxy_page|failed or
            ssl_page|failed or
            proxy_ssl|failed or
            shellinabox|failed or
            proxy_box|failed or
            webmin|failed or
            proxy_min|failed or
            adminer|failed or
            proxy_adminer|failed
            )

    - name: Destroy TurnKey containers
      tags: destroy
      # issue lxc-destroy via command to invoke wrapper script
      command: "lxc-destroy -n {{container}}"
      ignore_errors: yes
      when: not (
            created|failed or
            webpage|failed or
            proxy_page|failed or
            ssl_page|failed or
            proxy_ssl|failed or
            shellinabox|failed or
            proxy_box|failed or
            webmin|failed or
            proxy_min|failed or
            adminer|failed or
            proxy_adminer|failed
            )
